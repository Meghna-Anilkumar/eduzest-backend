name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: eduzest-app
  IMAGE_TAG: latest

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Create PEM file
        run: |
          echo "${{ secrets.EC2_ACCESS_PEM }}" > eduzest.pem
          chmod 400 eduzest.pem

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i eduzest.pem ${{ secrets.EC2_ACCESS_SSH_COMMAND }} << 'EOF'
            # Stop and remove existing container
            sudo docker ps -q --filter "name=eduzest-container" | grep -q . && sudo docker stop eduzest-container && sudo docker rm eduzest-container

            # Remove old image
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || true

            # Pull the latest image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            # Create .env file
            echo "${{ secrets.APPLICATION_ENV }}" > .env

            # Run the container
            sudo docker run -d --name eduzest-container --env-file .env -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          EOF